{
  //--------------------------------------------------
  // Chain together the sims

  cout<<"Chaining sims..."<<endl;

  Int_t numchains=5;
  //Int_t numchains=2;
  Int_t numsims=10;

  Int_t numens=1;
  Double_t minE[numens]={0.00};
  Double_t maxE[numens]={1050.};

  Int_t numhists=numchains*numens;


  TChain *geantTree[numchains];

  char name_base[numchains][200]={
    "~/scratch/ROOTfiles/prexsim_shldgeo_1e6__LD2none-1_SRC_nfld_sim_",
    "~/scratch/ROOTfiles/prexsim_shldgeo_1e6_Pb_none-1_prexI_nfld_sim_",
    "~/scratch/ROOTfiles/prexsim_shldgeo_1e6_Pb__prexborpoly10_prexII_nfld_sim_",
    "~/scratch/ROOTfiles/prexsim_shldgeo_1e6_Pb_none-1_prexII_nfld_sim_",
    "~/scratch/ROOTfiles/prexsim_shldgeo_1e6_Pb__combo10_nfld_sim_"
  };

  char name[200];

  for (Int_t j=0;j<numchains;j++){
    geantTree[j]=new TChain("geant");
    cout<<name_base[j];
    for (Int_t i=0;i<numsims;i++){
      sprintf(name,"%s%i.root",name_base[j],i);
      geantTree[j]->Add(name);
      cout<<" "<<i;
    }
    cout<<endl;
  }

  //--------------------------------------------------
  //Some formatting stuff:

  Int_t histcolor[numchains]={2,4,1,3,5};
  Int_t histlinetype[numchains]={1,2,1,1,1};

  // Needs to match the order of the input file names...  
    char legtitle[numchains][200]={
    "10 cm LD2, 4.46 GeV",
    "0.5 mm Pb, PREx I",
    "0.5 mm Pb, PREx II",
    "0.5 mm Pb, PREx II, no shield",
    "0.5 mm Pb, PREx II, combo shield"
  };

  //--------------------------------------------------
  // Set up some cuts, etc.

  Double_t total_neutrons[numhists];

  TH1F* h[numhists];
  char hname[numhists][200];
  char htitle[numhists][200];
  char plot[numhists][200];
  char cut[numens][200];

  Int_t volume =0;
  Int_t particle =5;

  char cut[numens][200];

  //----------------------
  //Prepare the legend
  Double_t xmin=0.6,xmax=0.75, ymin=0.5, ymax=0.8;

  TLegend *leg = new TLegend(xmin,ymin,xmax,ymax,NULL,"brNDC");
  leg->SetTextFont(62);
  leg->SetTextSize(0.03);
  leg->SetFillColor(19);
  leg->SetFillStyle(1001);
  TLegendEntry *entry;

  //--------------------------------------------------
  // Make the plots

  cout<<endl;
  cout<<"Making the plots..."<<endl;

  TCanvas *c1 = new TCanvas("c1");
  c1->Divide(1,numens);

  Int_t k=0;
  for(Int_t en=0;en<numens;en++){
    c1->cd(en+1);

    for (Int_t pl=0;pl<numchains;pl++){
      if(pl==4){
      sprintf(cut[en],"(volume==%i&&z>0)*(10*kineE/8)",volume);
      } else {
      sprintf(cut[en],"(volume==%i&&z>0)*kineE",volume);
      }
      sprintf(hname[k],"h%i",k);
      sprintf(htitle[k],"Total forward energy per incident electron per cm");
      h[k] = new TH1F(hname[k],htitle[k],3100,0,3100);
      sprintf(plot[k],"sqrt(pow(x,2)+pow(y,2))/10.>>h%i",k);
 
      cout<<hname[k]<<" "<<plot[k]<<" "<<cut[en]<<endl;
 
      if(pl==0){
	if(pl==0){
	h[k]->SetLineColor(histcolor[pl]);
	h[k]->SetLineStyle(histlinetype[pl]);
	h[k]->SetFillColor(histcolor[pl]);
	h[k]->SetFillStyle(3003);
	} else {
	}
	h[k]->SetLineColor(histcolor[pl]);
	h[k]->SetLineStyle(histlinetype[pl]);
	//h[k]->GetXaxis()->SetTitle("Energy (MeV)");
	h[k]->GetXaxis()->SetTitle("r (cm)");
	h[k]->GetYaxis()->SetTitle("Energy/cm");
	h[k]->SetStats(0);
	h[k]->SetMinimum(1e-3);
	h[k]->SetMaximum(1e11);
	geantTree[pl]->Draw(plot[k],cut[en],"");
	total_neutrons[k]=h[k]->Integral();
      } else {
	h[k]->SetLineColor(histcolor[pl]);
	h[k]->SetLineStyle(histlinetype[pl]);
	geantTree[pl]->Draw(plot[k],cut[en],"same");
	total_neutrons[k]=h[k]->Integral();
      }
      
      if(en==0){
	if(pl==0){
	entry=leg->AddEntry("c1",legtitle[pl],"f");
	entry->SetFillColor(histcolor[pl]);
	entry->SetFillStyle(3003);
	} else {
	entry=leg->AddEntry("c1",legtitle[pl],"l");
	}
	entry->SetLineColor(histcolor[pl]);
	entry->SetLineStyle(histlinetype[pl]);
	leg->Draw();
      }
      k++;
    }
  }
  cout<<endl;
  
  c1_1->SetLogy();
  /*  c1_2->SetLogy();
  c1_3->SetLogy();
  c1_4->SetLogy();*/

  c1->Modified();
  c1->cd();
  c1->SetSelected(c1);
  
  // Print out the number of neutrons for each energy range...
  k=0;
  for(Int_t en=0;en<numens;en++){
    for (Int_t pl=0;pl<numchains;pl++){
      cout<<"The total energy per incident electron is "<< total_neutrons[k]/1e7<<endl;
      k++;
    }
  }
  
}
