{
  gStyle->SetPalette(1);
  gStyle->SetOptStat(kFALSE);
  //--------------------------------------------------
  // Chain together the sims

  cout<<"Chaining sims..."<<endl;

  Int_t numchains=7;
  //Int_t numchains=2;
  Int_t numsims=10;

  Int_t numens=3;
  Double_t minE[numens]={0.00,1.00,50.0};
  Double_t maxE[numens]={1.00,50.0,500.};
  
  /*
  Int_t numens=2;
  Double_t minE[numens]={0.00,100.0};
  Double_t maxE[numens]={100.,500.0};
  */
  Int_t numhists=numchains*numens;


  TChain *geantTree[numchains];


  char name_base[numchains][200]={
    "~/scratch/ROOTfiles/prexsim_shldgeo_1e6_Pb_none359_collrad_nofld_sim_",
    "~/scratch/ROOTfiles/prexsim_shldgeo_1e6_Pb_none450_collrad_nofld_sim_",
    "~/scratch/ROOTfiles/prexsim_shldgeo_1e6_Pb_none541_collrad_nofld_sim_",
    "~/scratch/ROOTfiles/prexsim_shldgeo_1e6_Pb_none632_collrad_nofld_sim_",
    "~/scratch/ROOTfiles/prexsim_shldgeo_1e6_Pb_none723_collrad_nofld_sim_",
    "~/scratch/ROOTfiles/prexsim_shldgeo_1e6_Pb_none814_collrad_nofld_sim_",
    "~/scratch/ROOTfiles/prexsim_shldgeo_1e6_Pb_none905_collrad_nofld_sim_"
  };
  /*
  char name_base[numchains][200]={
    "~/scratch/ROOTfiles/prexsim_shldgeo_1e6_none-1_sim_",
    "~/scratch/ROOTfiles/prexsim_shldgeo_1e6_none-1_coll_z0_sim_",
  };
  */
  char name[200];

  for (Int_t j=0;j<numchains;j++){
    geantTree[j]=new TChain("geant");
    cout<<name_base[j];
    for (Int_t i=0;i<numsims;i++){
      sprintf(name,"%s%i.root",name_base[j],i);
      geantTree[j]->Add(name);
      cout<<" "<<i;
    }
    cout<<endl;
  }

  //--------------------------------------------------
  //Some formatting stuff:

  Int_t histcolor[numchains]={1,2,3,4,5,6,7};
  Int_t histlinetype[numchains]={1,1,1,1,1,1,1};
    
  //  Int_t histcolor[numchains]={1,2,3,4,5,6};
  // 1 - solid, 2 - dashed
  //  Int_t histlinetype[numchains]={1,2,1,2,1,2};
  //  Int_t histlinetype[numchains]={1,1,1,1,1,1};

  // Needs to match the order of the input file names...  
    char legtitle[numchains][200]={
    "Pb, no shield, no beamline, coll R_i=1.359cm",
    "Pb, no shield, no beamline, coll R_i=1.450cm",
    "Pb, no shield, no beamline, coll R_i=1.541cm",
    "Pb, no shield, no beamline, coll R_i=1.632cm",
    "Pb, no shield, no beamline, coll R_i=1.723cm",
    "Pb, no shield, no beamline, coll R_i=1.814cm",
    "Pb, no shield, no beamline, coll R_i=1.905cm"
  };
  /*
  char legtitle[numchains][200]={
    "old coll defn",
    "new coll defn"
  };
    */
  //--------------------------------------------------
  // Set up some cuts, etc.

  Double_t total_neutrons[numhists];

  TH2F* h[numhists];
  //  char hname[numhists][200];
  //  char plot[numhists][200];
  //  char cut[numens][200];

  Int_t volume =0;
  Int_t particle =5;

  //----------------------
  //Prepare the legend
  /*  Double_t xmin=0.6,xmax=0.75, ymin=0.5, ymax=0.8;

  TLegend *leg = new TLegend(xmin,ymin,xmax,ymax,NULL,"brNDC");
  leg->SetTextFont(62);
  leg->SetTextSize(0.03);
  leg->SetFillColor(19);
  leg->SetFillStyle(1001);
  TLegendEntry *entry;
*/
  //--------------------------------------------------
  // Make the plots

  cout<<endl;
  cout<<"Making the plots..."<<endl;
  char cut[200];
  sprintf(cut,"volume==%i&&type==%i&&z>0",volume,particle);

  Int_t nxbins = 60; Int_t xmin = -3000;  Int_t xmax = 3000;
  Int_t nybins = 60; Int_t ymin = -3000;  Int_t ymax = 3000;

  h1 = new TH2F("h1",legtitle[0],nxbins,xmin,xmax,nybins,ymin,ymax);
  h2 = new TH2F("h2",legtitle[2],nxbins,xmin,xmax,nybins,ymin,ymax);
  h3 = new TH2F("h3",legtitle[4],nxbins,xmin,xmax,nybins,ymin,ymax);
  h4 = new TH2F("h4",legtitle[6],nxbins,xmin,xmax,nybins,ymin,ymax);

  Double_t n_max=100;
  TCanvas *c1 = new TCanvas("c1");
  c1->Divide(2,2);
   
  c1->cd(1);
  h1->SetMaximum(n_max);
  geantTree[0]->Draw("x/10.:y/10.>>h1",cut,"colz");
  
  c1->cd(2);
  h2->SetMaximum(n_max);
  geantTree[2]->Draw("x/10.:y/10.>>h2",cut,"colz");

  c1->cd(3);
  h3->SetMaximum(n_max);
  geantTree[4]->Draw("x/10.:y/10.>>h3",cut,"colz");
  
  c1->cd(4);
  h4->SetMaximum(n_max);
  geantTree[6]->Draw("x/10.:y/10.>>h4",cut,"colz");


  //================================================================
  nxbins = 480; xmin = -110;   xmax = 10;
  nybins = 80; ymin = -10;   ymax = 10;

  h5 = new TH2F("h5",legtitle[0],nxbins,xmin,xmax,nybins,ymin,ymax);
  h6 = new TH2F("h6",legtitle[2],nxbins,xmin,xmax,nybins,ymin,ymax);
  h7 = new TH2F("h7",legtitle[4],nxbins,xmin,xmax,nybins,ymin,ymax);
  h8 = new TH2F("h8",legtitle[6],nxbins,xmin,xmax,nybins,ymin,ymax);

  n_max=10;
  TCanvas *c2 = new TCanvas("c2");
  c2->Divide(2,2);
   
  c2->cd(1);
  h5->SetMaximum(n_max);
  geantTree[0]->Draw("x0/10.:z0/10.>>h5",cut,"colz");
  
  c2->cd(2);
  h6->SetMaximum(n_max);
  geantTree[2]->Draw("x0/10.:z0/10.>>h6",cut,"colz");

  c2->cd(3);
  h7->SetMaximum(n_max);
  geantTree[4]->Draw("x0/10.:z0/10.>>h7",cut,"colz");
  
  c2->cd(4);
  h8->SetMaximum(n_max);
  geantTree[6]->Draw("x0/10.:z0/10.>>h8",cut,"colz");

  //================================================================
  nxbins = 80; xmin = -10;   xmax = 10;
  nybins = 80; ymin = -10;   ymax = 10;

  h9 = new TH2F("h9",legtitle[0],nxbins,xmin,xmax,nybins,ymin,ymax);
  h10 = new TH2F("h10",legtitle[2],nxbins,xmin,xmax,nybins,ymin,ymax);
  h11 = new TH2F("h11",legtitle[4],nxbins,xmin,xmax,nybins,ymin,ymax);
  h12 = new TH2F("h12",legtitle[6],nxbins,xmin,xmax,nybins,ymin,ymax);

  n_max=10;
  TCanvas *c3 = new TCanvas("c3");
  c3->Divide(2,2);
   
  c3->cd(1);
  h9->SetMaximum(n_max);
  geantTree[0]->Draw("x0/10.:y0/10.>>h9",cut,"colz");
  
  c3->cd(2);
  h10->SetMaximum(n_max);
  geantTree[2]->Draw("x0/10.:y0/10.>>h10",cut,"colz");

  c3->cd(3);
  h11->SetMaximum(n_max);
  geantTree[4]->Draw("x0/10.:y0/10.>>h11",cut,"colz");
  
  c3->cd(4);
  h12->SetMaximum(n_max);
  geantTree[6]->Draw("x0/10.:y0/10.>>h12",cut,"colz");






    /*

  TCanvas *c1 = new TCanvas("c1");
  c1->Divide(1,numens);

  Int_t k=0;
  for(Int_t en=0;en<numens;en++){
    c1->cd(en+1);

    for (Int_t pl=0;pl<numchains;pl++){
      sprintf(cut[en],"(volume==%i&&type==%i&&kineE>%f&&kineE<%f)*(1/10000000)",volume,particle,minE[en],maxE[en]);
      sprintf(hname[k],"h%i",k);
      h[k] = new TH1F(hname[k],"Neutron counts per incident electron",200,minE[en],maxE[en]);
      sprintf(plot[k],"kineE>>h%i",k);
      //h[k] = new TH1F(hname[k],"Neutron counts per incident electron",600,-400,2600);      
      //sprintf(plot[k],"z0/10.>>h%i",k);
      cout<<hname[k]<<" "<<plot[k]<<" "<<cut[en]<<endl;

      if(pl==0){
	h[k]->SetLineColor(histcolor[pl]);
	h[k]->SetLineStyle(histlinetype[pl]);
	h[k]->GetXaxis()->SetTitle("Energy (MeV)");
	h[k]->GetYaxis()->SetTitle("Counts");
	h[k]->SetStats(0);
	h[k]->SetMinimum(1e-12);
	h[k]->SetMaximum(1e-2);
	geantTree[pl]->Draw(plot[k],cut[en],"");
	total_neutrons[k]=h[k]->Integral();
      } else {
	h[k]->SetLineColor(histcolor[pl]);
	h[k]->SetLineStyle(histlinetype[pl]);
	geantTree[pl]->Draw(plot[k],cut[en],"same");
	total_neutrons[k]=h[k]->Integral();
      }
      
      if(en==1){
	entry=leg->AddEntry("c1",legtitle[pl],"l");
	entry->SetLineColor(histcolor[pl]);
	entry->SetLineStyle(histlinetype[pl]);
	leg->Draw();
      }
      k++;
    }
  }
  cout<<endl;
  */
  
  
  c1->Modified();
  c1->cd();
  c1->SetSelected(c1);
  
  // Print out the number of neutrons for each energy range...
  k=0;
  for(Int_t en=0;en<numens;en++){
    for (Int_t pl=0;pl<numchains;pl++){
      cout<<"The total number of neutrons for "<<legtitle[pl]<<" and "<<minE[en]<<"<E<"<<maxE[en]<<" MeV  is "<< total_neutrons[k]<<endl;
      k++;
    }
  }
  
}
