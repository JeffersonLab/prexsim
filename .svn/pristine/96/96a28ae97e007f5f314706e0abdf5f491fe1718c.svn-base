{

  cout<<"Chaining sims..."<<endl;
  TChain geantPbTree("geant");
  TChain geantPbCTree("geant");
  TChain geantPbonlyTree("geant");
  TChain geantPbonlyCTree("geant");
  TChain geantLD2Tree("geant");
  TChain geantLD2CTree("geant");


  char name[200];

  for (Int_t i=0;i<10;i++){
    sprintf(name,"~/scratch/ROOTfiles/prexsim_shldgeo_1e6_none_0.5mmPbtgtonly-1_sim_%i.root",i);
    geantPbonlyTree->Add(name);
    cout<<name<<endl;
  }
  for (Int_t i=0;i<10;i++){
    sprintf(name,"~/scratch/ROOTfiles/prexsim_shldgeo_1e6_none_0.5mmPbtgtonly_QGSC-1_sim_%i.root",i);
    geantPbonlyCTree->Add(name);
    cout<<name<<endl;
  }
  for (Int_t i=0;i<10;i++){
    sprintf(name,"~/scratch/ROOTfiles/prexsim_shldgeo_1e6_none_10cmLD2_targ-1_sim_%i.root",i);
    geantLD2Tree->Add(name);
    cout<<name<<endl;
  }
  for (Int_t i=0;i<10;i++){
    sprintf(name,"~/scratch/ROOTfiles/prexsim_shldgeo_1e6_none_10cmLD2_targ_QGSC-1_sim_%i.root",i);
    geantLD2CTree->Add(name);
    cout<<name<<endl;
  }
  for (Int_t i=0;i<10;i++){
    sprintf(name,"~/scratch/ROOTfiles/prexsim_shldgeo_1e6_none-1_sim_%i.root",i);
    geantPbTree->Add(name);
    cout<<name<<endl;
  }
  for (Int_t i=0;i<10;i++){
    sprintf(name,"~/scratch/ROOTfiles/prexsim_shldgeo_1e6_none_QGSC-1_sim_%i.root",i);
    geantPbCTree->Add(name);
    cout<<name<<endl;
  }


  //--------------------------------------------------
  // Set up some cuts, etc.
  Double_t total_neutrons[18];

  Double_t minE[3]={0.00,100.,50.0};
  Double_t maxE[3]={100.,500.0,500.};

  TH1F* h[18];
  char hname[18][200];
  char plot[18][200];

  Int_t k=0;
 
  Int_t volume =0;
  Int_t particle =5;

  char cut[3][200];

  cout<<endl;
  for(Int_t en=0;en<3;en++){
    for (Int_t pl=0;pl<6;pl++){

      sprintf(cut[en],"(volume==%i&&type==%i&&kineE>%f&&kineE<%f)*(1/10000000)",volume,particle,minE[en],maxE[en]);
      sprintf(hname[k],"h%i",k);
      //      h[k] = new TH1F(hname[k],"Neutron counts per incident electron, polyethylene",200,minE[en],maxE[en]);
      //      h[k] = new TH1F(hname[k],"Neutron counts per incident electron, iron",200,minE[en],maxE[en]);
      h[k] = new TH1F(hname[k],"Neutron counts per incident electron",200,minE[en],maxE[en]);
      sprintf(plot[k],"kineE>>h%i",k);
      cout<<hname[k]<<" "<<plot[k]<<" "<<cut[en]<<endl;
      k++;

    }
  }
  cout<<endl;
  //--------------------------------------------------
  // Make the plots
  cout<<"Making the plots..."<<endl;

  TCanvas *c1 = new TCanvas("c1");
 
  //  c1->Divide(1,3);
  c1->Divide(1,2);
  c1->cd(1);

  Int_t q=0;
  h[q]->SetLineColor(1);
  h[q]->SetLineStyle(1);
  h[q]->GetXaxis()->SetTitle("Energy (MeV)");
  h[q]->GetYaxis()->SetTitle("Counts");
  h[q]->SetStats(0);
  h[q]->SetMinimum(1e-12);
  h[q]->SetMaximum(1e-2);

  geantPbonlyTree->Draw(plot[q],cut[0],"");
  total_neutrons[q]=h[q]->Integral();

  q++;
  h[q]->SetLineColor(1);
  h[q]->SetLineStyle(2);
  geantPbonlyCTree->Draw(plot[q],cut[0],"same");
  total_neutrons[q]=h[q]->Integral();

  q++;
  h[q]->SetLineColor(2);
  h[q]->SetLineStyle(1);
  geantLD2Tree->Draw(plot[q],cut[0],"same");
  total_neutrons[q]=h[q]->Integral();

  q++;
  h[q]->SetLineColor(2);
  h[q]->SetLineStyle(2);
  geantLD2CTree->Draw(plot[q],cut[0],"same");
  total_neutrons[q]=h[q]->Integral();

  q++;
  h[q]->SetLineColor(4);
  h[q]->SetLineStyle(1);
  geantPbTree->Draw(plot[q],cut[0],"same");
  total_neutrons[q]=h[q]->Integral();

  q++;
  h[q]->SetLineColor(4);
  h[q]->SetLineStyle(2);
  geantPbCTree->Draw(plot[q],cut[0],"same");
  total_neutrons[q]=h[q]->Integral();


  //----------------------
  c1->cd(2);

  q++;
  h[q]->SetLineColor(1);
  h[q]->SetLineStyle(1);
  h[q]->GetXaxis()->SetTitle("Energy (MeV)");
  h[q]->GetYaxis()->SetTitle("Counts");
  h[q]->SetStats(0);
  h[q]->SetMinimum(1e-8);
  h[q]->SetMaximum(1e-2);

  geantPbonlyTree->Draw(plot[q],cut[1],"");
  total_neutrons[q]=h[q]->Integral();

  q++;
  h[q]->SetLineColor(1);
  h[q]->SetLineStyle(2);
  geantPbonlyCTree->Draw(plot[q],cut[1],"same");
  total_neutrons[q]=h[q]->Integral();

  q++;
  h[q]->SetLineColor(2);
  h[q]->SetLineStyle(1);
  geantLD2Tree->Draw(plot[q],cut[1],"same");
  total_neutrons[q]=h[q]->Integral();

  q++;
  h[q]->SetLineColor(2);
  h[q]->SetLineStyle(2);
  geantLD2CTree->Draw(plot[q],cut[1],"same");
  total_neutrons[q]=h[q]->Integral();

  q++;
  h[q]->SetLineColor(4);
  h[q]->SetLineStyle(1);
  geantPbTree->Draw(plot[q],cut[1],"same");
  total_neutrons[q]=h[q]->Integral();

  q++;
  h[q]->SetLineColor(4);
  h[q]->SetLineStyle(2);
  geantPbCTree->Draw(plot[q],cut[1],"same");
  total_neutrons[q]=h[q]->Integral();

  //----------------------
  //Make the legend
  Double_t xmin=0.6,xmax=0.75, ymin=0.5, ymax=0.8;

   TLegend *leg = new TLegend(xmin,ymin,xmax,ymax,NULL,"brNDC");
   leg->SetTextFont(62);
   leg->SetTextSize(0.03);
   leg->SetFillColor(19);
   leg->SetFillStyle(1001);
   TLegendEntry *entry=leg->AddEntry("c1","Pb only QGSP","l");
   entry->SetLineColor(1);
   entry->SetLineStyle(1);

   entry=leg->AddEntry("c1","Pb only QGSC","l");
   entry->SetLineColor(1);
   entry->SetLineStyle(2);

   entry=leg->AddEntry("c1","LD2 QGSP","l");
   entry->SetLineColor(2);
   entry->SetLineStyle(1);

   entry=leg->AddEntry("c1","LD2 QGSC","l");
   entry->SetLineColor(2);
   entry->SetLineStyle(2);

   entry=leg->AddEntry("c1","Pb w/ coll QGSP","l");
   entry->SetLineColor(4);
   entry->SetLineStyle(1);

   entry=leg->AddEntry("c1","Pb w/ coll QGSC","l");
   entry->SetLineColor(4);
   entry->SetLineStyle(2);


   leg->Draw();

  //----------------------
   /*
  c1->cd(3);

  q++;
  h[q]->SetLineColor(1);
  h[q]->SetLineStyle(1);
  h[q]->GetXaxis()->SetTitle("Energy (MeV)");
  h[q]->GetYaxis()->SetTitle("Counts");
  h[q]->SetStats(0);
  h[q]->SetMinimum(1e-8);
  h[q]->SetMaximum(1e-2);

  geantPbonlyTree->Draw(plot[q],cut[2],"");
  total_neutrons[q]=h[q]->Integral();

  q++;
  h[q]->SetLineColor(1);
  h[q]->SetLineStyle(2);
  geantPbonlyCTree->Draw(plot[q],cut[2],"same");
  total_neutrons[q]=h[q]->Integral();

  q++;
  h[q]->SetLineColor(2);
  h[q]->SetLineStyle(1);
  geantLD2Tree->Draw(plot[q],cut[2],"same");
  total_neutrons[q]=h[q]->Integral();

  q++;
  h[q]->SetLineColor(2);
  h[q]->SetLineStyle(2);
  geantLD2CTree->Draw(plot[q],cut[2],"same");
  total_neutrons[q]=h[q]->Integral();
   */

   c1->Modified();
   c1->cd();
   c1->SetSelected(c1);

   k=0;
   for(Int_t en=0;en<3;en++){
     for (Int_t pl=0;pl<6;pl++){
       cout<<"The total number of neutrons for "<<minE[en]<<"<E<"<<maxE[en]<<" MeV  is "<< total_neutrons[k]<<endl;
     k++;
   }
  }
  
}
