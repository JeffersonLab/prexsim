{

  cout<<"Chaining sims..."<<endl;
  TChain geantpoly0Tree("geant");
  TChain geantpoly10Tree("geant");
  TChain geantpoly20Tree("geant");
  TChain geantpoly30Tree("geant");
  TChain geantpoly40Tree("geant");
  TChain geantpoly50Tree("geant");

  char name[200];

  for (Int_t i=0;i<10;i++){
    sprintf(name,"~/scratch/ROOTfiles/prexsim_shldgeo_1e6_none-1_sim_%i.root",i);
    geantpoly0Tree->Add(name);
    cout<<name<<endl;
  }
  for (Int_t i=0;i<10;i++){
    sprintf(name,"~/scratch/ROOTfiles/prexsim_shldgeo_1e6_poly10_sim_%i.root",i);
    geantpoly10Tree->Add(name);
    cout<<name<<endl;
  }
  for (Int_t i=0;i<10;i++){
    sprintf(name,"~/scratch/ROOTfiles/prexsim_shldgeo_1e6_poly20_sim_%i.root",i);
    geantpoly20Tree->Add(name);
    cout<<name<<endl;
  }
  for (Int_t i=0;i<10;i++){
    sprintf(name,"~/scratch/ROOTfiles/prexsim_shldgeo_1e6_poly30_sim_%i.root",i);
    geantpoly30Tree->Add(name);
    cout<<name<<endl;
  }
  for (Int_t i=0;i<10;i++){
    sprintf(name,"~/scratch/ROOTfiles/prexsim_shldgeo_1e6_poly40_sim_%i.root",i);
    geantpoly40Tree->Add(name);
    cout<<name<<endl;
  }
  for (Int_t i=0;i<10;i++){
    sprintf(name,"~/scratch/ROOTfiles/prexsim_shldgeo_1e6_poly50_sim_%i.root",i);
    geantpoly50Tree->Add(name);
    cout<<name<<endl;
  }

  //--------------------------------------------------
  // Set up some cuts, etc.
  Double_t total_neutrons[18];

  Double_t minE[3]={0.00,1.00,50.0};
  Double_t maxE[3]={1.00,50.0,500.};

  TH1F* h[18];
  char hname[18][200];
  char plot[18][200];

  Int_t k=0;
 
  Int_t volume =0;
  Int_t particle =5;

  char cut[3][200];

  cout<<endl;
  for(Int_t en=0;en<3;en++){
    for (Int_t pl=0;pl<6;pl++){

      sprintf(cut[en],"(volume==%i&&type==%i&&kineE>%f&&kineE<%f)*(1/10000000)",volume,particle,minE[en],maxE[en]);
      sprintf(hname[k],"h%i",k);
      //      h[k] = new TH1F(hname[k],"Neutron counts per incident electron, polyethylene",200,minE[en],maxE[en]);
      //      h[k] = new TH1F(hname[k],"Neutron counts per incident electron, iron",200,minE[en],maxE[en]);
      h[k] = new TH1F(hname[k],"Neutron counts per incident electron, polyethylene",200,minE[en],maxE[en]);
      sprintf(plot[k],"kineE>>h%i",k);
      cout<<hname[k]<<" "<<plot[k]<<" "<<cut[en]<<endl;
      k++;

    }
  }
  cout<<endl;

  //--------------------------------------------------
  // Make the plots
  cout<<"Making the plots..."<<endl;

  TCanvas *c1 = new TCanvas("c1");
 
  c1->Divide(1,3);
  c1->cd(1);

  h[0]->SetLineColor(1);
  h[0]->GetXaxis()->SetTitle("Energy (MeV)");
  h[0]->GetYaxis()->SetTitle("Counts");
  h[0]->SetStats(0);
  h[0]->SetMinimum(1e-8);
  h[0]->SetMaximum(1e-2);

  geantpoly0Tree->Draw(plot[0],cut[0],"");
  total_neutrons[0]=h[0]->Integral();

  h[1]->SetLineColor(2);
  geantpoly10Tree->Draw(plot[1],cut[0],"same");
  total_neutrons[1]=h[1]->Integral();

  h[2]->SetLineColor(3);
  geantpoly20Tree->Draw(plot[2],cut[0],"same");
  total_neutrons[2]=h[2]->Integral();

  h[3]->SetLineColor(4);
  geantpoly30Tree->Draw(plot[3],cut[0],"same");
  total_neutrons[3]=h[3]->Integral();

  h[4]->SetLineColor(5);
  geantpoly40Tree->Draw(plot[4],cut[0],"same");
  total_neutrons[4]=h[4]->Integral();

  h[5]->SetLineColor(6);
  geantpoly50Tree->Draw(plot[5],cut[0],"same");
  total_neutrons[5]=h[5]->Integral();

  //----------------------
  c1->cd(2);

  h[6]->SetLineColor(1);
  h[6]->GetXaxis()->SetTitle("Energy (MeV)");
  h[6]->GetYaxis()->SetTitle("Counts");
  h[6]->SetStats(0);
  h[6]->SetMinimum(1e-8);
  h[6]->SetMaximum(2e-3);

  geantpoly0Tree->Draw(plot[6],cut[1],"");
  total_neutrons[6]=h[6]->Integral();

  h[7]->SetLineColor(2);
  geantpoly10Tree->Draw(plot[7],cut[1],"same");
  total_neutrons[7]=h[7]->Integral();

  h[8]->SetLineColor(3);
  geantpoly20Tree->Draw(plot[8],cut[1],"same");
  total_neutrons[8]=h[8]->Integral();

  h[9]->SetLineColor(4);
  geantpoly30Tree->Draw(plot[9],cut[1],"same");
  total_neutrons[9]=h[9]->Integral();  

  h[10]->SetLineColor(5);
  geantpoly40Tree->Draw(plot[10],cut[1],"same");
  total_neutrons[10]=h[10]->Integral();  

  h[11]->SetLineColor(6);
  geantpoly50Tree->Draw(plot[11],cut[1],"same");
  total_neutrons[11]=h[11]->Integral();  

  //----------------------
  //Make the legend
  Double_t xmin=0.6,xmax=0.75, ymin=0.5, ymax=0.8;

   TLegend *leg = new TLegend(xmin,ymin,xmax,ymax,NULL,"brNDC");
   leg->SetTextFont(62);
   leg->SetTextSize(0.03);
   leg->SetFillColor(19);
   leg->SetFillStyle(1001);
   TLegendEntry *entry=leg->AddEntry("c1","0 cm thick","l");
   entry->SetLineColor(1);

   entry=leg->AddEntry("c1","10 cm thick","l");
   entry->SetLineColor(2);

   entry=leg->AddEntry("c1","20 cm thick","l");
   entry->SetLineColor(3);

   entry=leg->AddEntry("c1","30 cm thick","l");
   entry->SetLineColor(4);

   entry=leg->AddEntry("c1","40 cm thick","l");
   entry->SetLineColor(5);

   entry=leg->AddEntry("c1","50 cm thick","l");
   entry->SetLineColor(6);


   leg->Draw();

  //----------------------
  c1->cd(3);

  h[12]->SetLineColor(1);
  h[12]->GetXaxis()->SetTitle("Energy (MeV)");
  h[12]->GetYaxis()->SetTitle("Counts");
  h[12]->SetStats(0);
  h[12]->SetMinimum(1e-8);
  h[12]->SetMaximum(2e-3);

  geantpoly0Tree->Draw(plot[12],cut[2],"");
  total_neutrons[12]=h[12]->Integral();

  h[13]->SetLineColor(2);
  geantpoly10Tree->Draw(plot[13],cut[2],"same");
  total_neutrons[13]=h[13]->Integral();

  h[14]->SetLineColor(3);
  geantpoly20Tree->Draw(plot[14],cut[2],"same");
  total_neutrons[14]=h[14]->Integral();

  h[15]->SetLineColor(4);
  geantpoly30Tree->Draw(plot[15],cut[2],"same");
  total_neutrons[15]=h[15]->Integral();

  h[16]->SetLineColor(5);
  geantpoly40Tree->Draw(plot[16],cut[2],"same");
  total_neutrons[16]=h[16]->Integral();

  h[17]->SetLineColor(6);
  geantpoly50Tree->Draw(plot[17],cut[2],"same");
  total_neutrons[17]=h[17]->Integral();
  

   c1->Modified();
   c1->cd();
   c1->SetSelected(c1);

   k=0;
   for(Int_t en=0;en<3;en++){
    for (Int_t pl=0;pl<6;pl++){
      cout<<"The total number of neutrons for "<<minE[en]<<"<E<"<<maxE[en]<<" MeV and a polyethylene thickness of "<<0+pl*10<<" is "<< total_neutrons[k]<<endl;
     k++;
   }
  }
  
}
