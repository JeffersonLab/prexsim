{
  gStyle->SetPalette(1);
  gStyle->SetOptStat(kFALSE);
  //--------------------------------------------------
  // Chain together the sims

  cout<<"Chaining sims..."<<endl;

  Int_t numchains=1;
  //Int_t numchains=2;
  Int_t numsims=10;

  Int_t numens=3;
  Double_t minE[numens]={0.00,1.00,50.0};
  Double_t maxE[numens]={1.00,50.0,500.};
  
  /*
  Int_t numens=2;
  Double_t minE[numens]={0.00,100.0};
  Double_t maxE[numens]={100.,500.0};
  */
  Int_t numhists=numchains*numens;


  TChain *geantTree[numchains];
  
  char name_base[numchains][200]={
    //"~/scratch/ROOTfiles/prexsim_shldgeo_1e6_Pb__prexpolycrete10_fancy_sphere_sim_"
    //"~/scratch/ROOTfiles/prexsim_shldgeo_1e6__LD2none-1_SRC_nfld_sim_",
    //"~/scratch/ROOTfiles/prexsim_shldgeo_1e6_Pb_none-1_prexI_nfld_sim_",
    //"~/scratch/ROOTfiles/prexsim_shldgeo_1e6_Pb__prexborpoly10_prexII_nfld_sim_",
    //"~/scratch/ROOTfiles/prexsim_shldgeo_1e6_Pb_none-1_prexII_nfld_sim_",
    "~/scratch/ROOTfiles/prexsim_shldgeo_1e6_Pb__combo10_nfld_sim_"
  };

  char name[200];

  for (Int_t j=0;j<numchains;j++){
    geantTree[j]=new TChain("geant");
    cout<<name_base[j];
    for (Int_t i=0;i<numsims;i++){
      sprintf(name,"%s%i.root",name_base[j],i);
      geantTree[j]->Add(name);
      cout<<" "<<i;
    }
    cout<<endl;
  }

  //--------------------------------------------------
  //Some formatting stuff:

  //Int_t histcolor[numchains]={1,2};
  //Int_t histlinetype[numchains]={1,1};
    
  //Int_t histcolor[numchains]={1,2,1,2};
  Int_t histcolor[4]={1,1,1,1};
  // 1 - solid, 2 - dashed
  //  Int_t histlinetype[numchains]={1,2,1,2,1,2};
  //Int_t histlinetype[numchains]={1,1,1,1};
  Int_t histlinetype[4]={1,1,1,1};

  // Needs to match the order of the input file names...  
  //    char legtitle[numchains][200]={
    char legtitle[9][200]={
      "total",
      "primaries",
      "secondaries",
      "forward secondaries",
      "backward secondaries",
      "forward (all)",
      "forward (all, in dump)",
      "forward (all, not in dump)",
      "backward (all)",
  };
  //--------------------------------------------------
  // Set up some cuts, etc.

  Double_t total_neutrons[9];

  Int_t nxbins = 3100;  Int_t xmin = 0; Int_t xmax = 3100;

  TH1F* h1 = new TH1F("h1",legtitle[0],nxbins,xmin,xmax);
  TH1F* h2 = new TH1F("h2",legtitle[1],nxbins,xmin,xmax);
  TH1F* h3 = new TH1F("h3",legtitle[2],nxbins,xmin,xmax);
  TH1F* h4 = new TH1F("h4",legtitle[3],nxbins,xmin,xmax);
  TH1F* h5 = new TH1F("h5",legtitle[4],nxbins,xmin,xmax);
  TH1F* h6 = new TH1F("h6",legtitle[5],nxbins,xmin,xmax);
  TH1F* h7 = new TH1F("h7",legtitle[6],nxbins,xmin,xmax);
  TH1F* h8 = new TH1F("h8",legtitle[7],nxbins,xmin,xmax);
  TH1F* h9 = new TH1F("h9",legtitle[8],nxbins,xmin,xmax);



  Double_t n_max=1e8;
  TCanvas *c1 = new TCanvas("c1");
  c1->Divide(3,3);

  c1->cd(1);
  geantTree[0]->Draw("sqrt(pow(x,2)+pow(y,2))/10.>>h1","(volume==0)*kineE");
  total_neutrons[0]=h1->Integral();

  c1->cd(2);
  geantTree[0]->Draw("sqrt(pow(x,2)+pow(y,2))/10.>>h2","(volume==0&&track==1)*kineE");
  total_neutrons[1]=h2->Integral();

  c1->cd(3);
  geantTree[0]->Draw("sqrt(pow(x,2)+pow(y,2))/10.>>h3","(volume==0&&track>1)*kineE");
  total_neutrons[2]=h3->Integral();
  
  c1->cd(4);
  geantTree[0]->Draw("sqrt(pow(x,2)+pow(y,2))/10.>>h4","(volume==0&&track>1&&z>0)*kineE");
  total_neutrons[3]=h4->Integral();

  c1->cd(5);
  geantTree[0]->Draw("sqrt(pow(x,2)+pow(y,2))/10.>>h5","(volume==0&&track>1&&z<0)*kineE");
  total_neutrons[4]=h5->Integral();

  c1->cd(6);
  geantTree[0]->Draw("sqrt(pow(x,2)+pow(y,2))/10.>>h6","(volume==0&&z>0)*kineE");
  total_neutrons[5]=h6->Integral();

  c1->cd(7);
  geantTree[0]->Draw("sqrt(pow(x,2)+pow(y,2))/10.>>h7","(volume==0&&z>0&&sqrt(pow(x,2)+pow(y,2))/10.<=45.7)*kineE");
  total_neutrons[6]=h7->Integral();

  c1->cd(8);
  geantTree[0]->Draw("sqrt(pow(x,2)+pow(y,2))/10.>>h8","(volume==0&&z>0&&sqrt(pow(x,2)+pow(y,2))/10.>45.7)*kineE");
  total_neutrons[7]=h8->Integral();

  c1->cd(9);
  geantTree[0]->Draw("sqrt(pow(x,2)+pow(y,2))/10.>>h9","(volume==0&&z<0)*kineE");
  total_neutrons[8]=h9->Integral();


  for(Int_t k=0;k<9;k++){
      cout<<"The energy weighted total per incident electron for "<<legtitle[k]<<" is "<< total_neutrons[k]/1e7<<endl;
  }

}


