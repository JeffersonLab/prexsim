{
  cout<<"Chaining LD2 sims..."<<endl;

  TChain geantLD2Tree("geant");
  TChain geantLD21GeVTree("geant");
  TChain geantPbTree("geant");
  TChain geantPbonlyTree("geant");

  char name[200];

  for (Int_t i=0;i<10;i++){
    sprintf(name,"~/scratch/ROOTfiles/prexsim_shldgeo_1e6_none_10cmLD2_targ-1_sim_%i.root",i);
    geantLD2Tree->Add(name);
    cout<<name<<endl;
  }

  cout<<"Chaining Pb sims..."<<endl;
  for (Int_t i=0;i<10;i++){
    sprintf(name,"~/scratch/ROOTfiles/prexsim_shldgeo_1e6_none-1_sim_%i.root",i);
    geantPbTree->Add(name);
    cout<<name<<endl;
  }

  cout<<"Chaining Pb only sims..."<<endl;
  for (Int_t i=0;i<10;i++){
    sprintf(name,"~/scratch/ROOTfiles/prexsim_shldgeo_1e6_none_0.5mmPbtgtonly-1_sim_%i.root",i);
    geantPbonlyTree->Add(name);
    cout<<name<<endl;
  }
  cout<<"Chaining LD2 (1 GeV) sims..."<<endl;
  for (Int_t i=0;i<10;i++){
    sprintf(name,"~/scratch/ROOTfiles/prexsim_shldgeo_1e6_none_10cmLD2_targ_1GeV-1_sim_%i.root",i);
    geantLD21GeVTree->Add(name);
    cout<<name<<endl;
  }

  Double_t minE[4]={0.00,1.00,100.0,500.};
  Double_t maxE[4]={1.00,100.0,500.,2000.};
  //  Double_t maxE[4]={1.00,50.0,500.,4000.};

  Int_t en1=0;
  Int_t en2=1;

  Double_t total;
  TH1F* h1 = new TH1F("h1","Neutron counts per incident electron",200,minE[en1],maxE[en2]);
  TH1F* h2 = new TH1F("h2","Neutron counts per incident electron",200,minE[en1],maxE[en2]);
  TH1F* h3 = new TH1F("h3","Neutron counts per incident electron",200,minE[en1],maxE[en2]);
  TH1F* h4 = new TH1F("h4","Neutron counts per incident electron",200,minE[en1],maxE[en2]);



  Int_t volume =0;
  Int_t particle =5;

  char cut1[200];
  sprintf(cut1,"(volume==%i&&type==%i&&kineE>%f&&kineE<%f)*(1/10000000)",volume,particle,minE[en1],maxE[en2]);

  char cut2[200];
  sprintf(cut2,"(volume==%i&&type==%i&&kineE>%f&&kineE<%f)*(1/10000000)",volume,particle,minE[en1],maxE[en2]);

  TCanvas *c1 = new TCanvas("c1");
 
  c1->Divide(1,1);
  c1->cd(1);

  h1->SetLineColor(1);
  h1->GetXaxis()->SetTitle("Energy (MeV)");
  h1->GetYaxis()->SetTitle("Counts");
  h1->SetStats(0);
  h1->SetMinimum(1e-12);
  geantPbTree->SetLineColor(1);
  geantPbTree->Draw("kineE>>h1",cut1,"");
  //  h1->Draw();
  total=h1->Integral();
  cout<<total<<endl;

  h2->SetMinimum(1e-12);
  h2->SetLineColor(2);
  geantLD2Tree->Draw("kineE>>h2",cut2,"same");

  h3->SetMinimum(1e-12);
  h3->SetLineColor(4);
  geantPbonlyTree->Draw("kineE>>h3",cut1,"same");

  h4->SetMinimum(1e-12);
  h4->SetLineColor(3);
  geantLD21GeVTree->Draw("kineE>>h4",cut1,"same");

  Double_t xmin=0.6,xmax=0.75, ymin=0.7, ymax=0.8;
   TLegend *leg = new TLegend(xmin,ymin,xmax,ymax,NULL,"brNDC");
   leg->SetTextFont(62);
   leg->SetTextSize(0.03);
   leg->SetLineColor(1);
   leg->SetLineStyle(1);
   leg->SetLineWidth(1);
   leg->SetFillColor(19);
   leg->SetFillStyle(1001);
   TLegendEntry *entry=leg->AddEntry("c1","0.5 mm Pb, w/ coll","l");
   entry->SetLineColor(1);
   entry->SetLineStyle(1);
   entry->SetLineWidth(1);
   entry->SetMarkerColor(1);
   entry->SetMarkerStyle(20);
   entry->SetMarkerSize(1);
   entry=leg->AddEntry("c1","10 cm LD2 (4.46 GeV)","l");
   entry->SetLineColor(2);
   entry->SetLineStyle(1);
   entry->SetLineWidth(1);
   entry->SetMarkerColor(1);
   entry->SetMarkerStyle(20);
   entry->SetMarkerSize(1);
   entry=leg->AddEntry("c1","0.5 mm Pb only","l");
   entry->SetLineColor(4);
   entry->SetLineStyle(1);
   entry->SetLineWidth(1);
   entry->SetMarkerColor(1);
   entry->SetMarkerStyle(20);
   entry->SetMarkerSize(1);
   entry=leg->AddEntry("c1","10 cm LD2 (1.05 GeV)","l");
   entry->SetLineColor(3);
   entry->SetLineStyle(1);
   entry->SetLineWidth(1);
   entry->SetMarkerColor(1);
   entry->SetMarkerStyle(20);
   entry->SetMarkerSize(1);

   leg->Draw();
   c1->Modified();
   c1->cd();
   c1->SetSelected(c1);
}
